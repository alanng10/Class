class Infra : Any
{
    maide prusate Array ArrayCreate(var Int count)
    {
        var Array a;
        a : new Array;
        a.Count : count;
        a.Init();
        return a;
    }

    maide prusate Array ArrayCreateList(var List list)
    {
        var Array array;
        array : new Array;
        array.Count : list.Count;
        array.Init();
        
        var Iter iter;
        iter : list.IterCreate();
        list.IterSet(iter);

        var Int count;
        count : array.Count;
        var Int i;
        i : 0;
        while (i < count)
        {
            iter.Next();
            var Any a;
            a : iter.Value;
            array.Set(i, a);
            i : i + 1;
        }
        return array;
    }

    maide prusate Bool ArrayCopy(var Array dest, var Int destIndex, var Array source, var Int sourceIndex, var Int count)
    {
        var Int i;
        i : 0;
        while (i < count)
        {
            var Any k;
            k : source.Get(sourceIndex + i);
            dest.Set(destIndex + i, k);

            i : i + 1;
        }
        return true;
    }

    maide prusate Bool TableAdd(var Table table, var Any index, var Any value)
    {
        var Entry entry;
        entry : new Entry;
        entry.Init();
        entry.Index : index;
        entry.Value : value;
        table.Add(entry);
        return true;
    }

    maide prusate Bool Sort(var Array array, var Range range, var Less less, var Array copy)
    {
        var Int start;
        var Int end;
        start : range.Index;
        end : start + range.Count;

        this.CopyArray(copy, array, start, end);

        this.SplitMerge(array, copy, less, start, end);

        return true;
    }

    maide private Bool SplitMerge(var Array dest, var Array source, var Less less, var Int start, var Int end)
    {
        inf (end - start < 2)
        {
            return true;
        }

        var Int mid;
        mid : (start + end) / 2;

        this.SplitMerge(source, dest, less, start, mid);

        this.SplitMerge(source, dest, less, mid, end);

        this.Merge(dest, source, less, start, mid, end);

        return true;
    }

    maide private Bool Merge(var Array dest, var Array source, var Less less, var Int start, var Int mid, var Int end)
    {
        var Int i;
        var Int j;
        i : start;
        j : mid;

        var Int k;
        k : start;

        while (i < mid & j < end)
        {
            var Any left;
            var Any right;
            left : source.Get(i);
            right : source.Get(j);

            var Int ke;
            ke : less.Execute(left, right);

            var Bool b;
            b : (0 < ke);
            
            inf (~b)
            {
                dest.Set(k, left);

                i : i + 1;
            }

            inf (b)
            {
                dest.Set(k, right);

                j : j + 1;
            }

            k : k + 1;
        }

        while (i < mid)
        {
            var Any ka;
            ka : source.Get(i);

            dest.Set(k, ka);

            i : i + 1;

            k : k + 1;
        }

        while (j < end)
        {
            var Any kb;
            kb : source.Get(j);

            dest.Set(k, kb);

            j : j + 1;

            k : k + 1;
        }

        return true;
    }


    maide private Bool CopyArray(var Array dest, var Array source, var Int start, var Int end)
    {
        var Int count;
        count : end - start;
        
        var Int i;
        i : 0;
        while (i < count)
        {
            var Int index;
            index : start + i;

            var Any a;
            a : source.Get(index);
            
            dest.Set(index, a);

            i : i + 1;
        }
        return true;
    }
}